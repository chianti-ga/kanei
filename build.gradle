import java.util.jar.JarFile

plugins {
    id 'java'
    id 'idea'
    //Update deps
    id "com.github.ben-manes.versions" version "0.49.0"

    id "io.freefair.lombok" version "8.4"
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

group = 'fr.skitou'

repositories {
    mavenCentral()
    maven {
        name "reposiliteRepositoryReleases"
        url "http://45.155.169.234:4578/releases"
        allowInsecureProtocol = true
        credentials(PasswordCredentials)
        authentication {
            basic(BasicAuthentication)
        }
    }
    maven {
        url 'https://jitpack.io'
    }
}


dependencies {
    implementation "fr.skitou.botcore:botcore:1.2-28-gb49ed5d"
    implementation 'io.sentry:sentry:7.0.0'

    //Disc
    implementation 'dev.arbjerg:lavaplayer:2.0.3'
    implementation "com.github.topi314.lavasrc:lavasrc:3.2.9"
    implementation("net.dv8tion:JDA:5.0.0-beta.18")

    implementation 'ch.qos.logback:logback-classic:1.4.14'

    implementation('org.hibernate.orm:hibernate-core:6.4.0.Final')
    implementation 'org.hibernate.orm:hibernate-c3p0:6.3.1.Final'
    implementation 'org.hibernate.orm:hibernate-community-dialects:6.3.0.CR1'
    implementation group: 'org.xerial', name: 'sqlite-jdbc', version: '3.43.2.1'

    testImplementation platform('org.junit:junit-bom:5.10.0')
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    implementation 'com.google.code.gson:gson:2.10.1'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'
}
idea {
    module {
        downloadJavadoc = true
    }
}
dependencyUpdates {
    revision = "dev"
}
java {
    withJavadocJar()
    withSourcesJar()
}

test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile) {
    options.encoding('UTF-8')
}

compileTestJava {
    //options.verbose(true)
    options.deprecation(true)
    options.compilerArgs.addAll(
            "-Xlint"
    )
}

jar {
    manifest {
        attributes(
                'Main-Class': 'fr.skitou.kanei.KaneiMain',
                'Implementation-Title': project.name,
                'BotCore-Version': getBotCoreVersion()
        )
    }

    destinationDirectory.set file('build/libs/')
}
javadoc {
    options.encoding('UTF-8')
}

task copyJar(type: Copy) {
    dependsOn 'jar'
    from jar.getArchiveFile()
    into file('build/libs/')
    rename { String fileName ->
        fileName.replace(this.version as CharSequence, "")
    }
}

task getVersionFromGit() {
    def command = 'git describe --tags'
    def version = command.execute().text.trim()
    println "Application version: ${version}"

    project.version = version
    jar.manifest.attributes['Implementation-Version'] = version

}
tasks.named('build') {
    dependsOn('getVersionFromGit')
}

shadowJar {
    dependsOn 'build'
    archiveFileName = "kanei-all.jar"
}

def getBotCoreVersion() {
    def artifactId = "botcore"
    def dependency = configurations.compileClasspath
            .getFiles()
            .find { it.name.contains(artifactId) }

    if (dependency) {
        def jarFile = new JarFile(dependency)
        def manifest = jarFile.getManifest()
        def botCoreVersion = manifest.mainAttributes.getValue("BotCore-Version")
        jarFile.close()

        return botCoreVersion
    } else {
        throw new GradleException("Dependency not found: $artifactId")
    }
}